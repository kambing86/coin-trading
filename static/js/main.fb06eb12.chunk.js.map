{"version":3,"sources":["store/actions/order.ts","store/actions/index.ts","types/order.ts","store/reducers/order.ts","store/index.ts","store/reducers/index.ts","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ORDER_CREATED","createAction","ORDER_DONE","ORDER_CANCELLED","INIT","OrderType","OrderTiming","OrderTrigger","OrderStatus","initialState","order","state","action","type","getType","payload","map","o","id","actualPrice","status","DONE","modifiedTime","time","CANCELLED","getReducers","combineReducers","createStore","composeWithDevTools","createMuiTheme","DashboardPage","lazy","NotFoundComponent","useStyles","makeStyles","app","margin","flex","padding","App","classes","className","ThemeProvider","theme","store","fallback","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","unstable_createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAGaA,EAAgBC,uBAAa,gBAAbA,GAEhBC,EAAaD,uBAAa,aAAbA,GAMbE,EAAkBF,uBAAa,kBAAbA,GCTlBG,EAAOH,uBAAa,OAAbA,I,gCCFb,IAAKI,EAKAC,EAKAC,EAKAC,EAfZ,wI,SAAYH,K,UAAAA,E,aAAAA,M,cAKAC,K,UAAAA,E,aAAAA,M,cAKAC,K,wCAAAA,E,yCAAAA,M,cAKAC,K,kBAAAA,E,sBAAAA,E,aAAAA,M,iGCRNC,EAAsB,GAErB,SAASC,IAA2D,IAArDC,EAAoD,uDAArCF,EAAcG,EAAuB,uCACxE,OAAQA,EAAOC,MACb,KAAKC,kBAAQd,KACX,MAAM,GAAN,mBAAWW,GAAX,CAAkBC,EAAOG,UAC3B,KAAKD,kBAAQZ,KACX,OAAOS,EAAMK,KAAI,SAACC,GAChB,OAAIA,EAAEC,KAAON,EAAOG,QAAQG,GACnB,2BACFD,GADL,IAEEE,YAAaP,EAAOG,QAAQI,YAC5BC,OAAQZ,IAAYa,KACpBC,aAAcV,EAAOG,QAAQQ,OAG1BN,KAEX,KAAKH,kBAAQX,KACX,OAAOQ,EAAMK,KAAI,SAACC,GAChB,OAAIA,EAAEC,KAAON,EAAOG,QAAQG,GACnB,2BACFD,GADL,IAEEG,OAAQZ,IAAYgB,UACpBF,aAAcV,EAAOG,QAAQQ,OAG1BN,KAEX,QACE,OAAON,GChCN,SAASc,IACd,OAAOC,0BCHA,CACLhB,UDSWiB,0BAAYF,IAAeG,kC,4KEX3BC,gB,qBCUTC,EAAgBC,gBAAK,kBAAM,uDAE3BC,EAAoB,WACxB,OAAO,kDAGHC,EAAYC,YAAW,CAC3BC,IAAK,CACHC,OAAQ,SACRC,KAAM,WACNC,QAAS,UAwBEC,EApBH,WAAO,IAAD,EACVC,EAAUP,IAChB,OACE,qBAAKQ,UAAS,kDAA6CD,EAAQL,KAAnE,SACE,cAACO,EAAA,EAAD,CAAeC,MAAOA,EAAtB,SACE,cAAC,IAAD,CAAUC,MAAOA,IAAjB,SACE,cAAC,WAAD,CAAUC,SAAU,kDAApB,SACE,cAAC,IAAD,CAAQC,SAAQ,UAAEC,iBAAF,EAA4B,GAA5C,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,cAAC,IAAD,CAAOoB,UAAWlB,kB,MCtBdmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZOC,IAASC,oBAAoBC,SAASC,eAAe,SAC7DC,OAAO,cAAC,EAAD,KDkIN,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.fb06eb12.chunk.js","sourcesContent":["import { Order } from \"types/order\";\nimport { createAction } from \"typesafe-actions\";\n\nexport const ORDER_CREATED = createAction(\"ORDER_CREATED\")<Order>();\n\nexport const ORDER_DONE = createAction(\"ORDER_DONE\")<{\n  id: string;\n  actualPrice: number;\n  time: Date;\n}>();\n\nexport const ORDER_CANCELLED = createAction(\"ORDER_CANCELLED\")<{\n  id: string;\n  time: Date;\n}>();\n","import { createAction } from \"typesafe-actions\";\n\nexport const INIT = createAction(\"INIT\")();\nexport * from \"./order\";\n","export enum OrderType {\n  BUY = \"BUY\",\n  SELL = \"SELL\",\n}\n\nexport enum OrderTiming {\n  NOW = \"NOW\",\n  WHEN = \"WHEN\",\n}\n\nexport enum OrderTrigger {\n  MORE_THAN_OR_EQUAL = \"MORE_THAN_OR_EQUAL\",\n  LESS_THAN_OR_EQUAL = \"LESS_THAN_OR_EQUAL\",\n}\n\nexport enum OrderStatus {\n  PENDING = \"PENDING\",\n  CANCELLED = \"CANCELLED\",\n  DONE = \"DONE\",\n}\n\nexport interface Order {\n  id: string;\n  name: string;\n  type: OrderType;\n  trigger?: OrderTrigger;\n  price: number;\n  actualPrice?: number;\n  quantity: number;\n  createdTime: Date;\n  status: OrderStatus;\n  modifiedTime?: Date;\n}\n","import { ORDER_CANCELLED, ORDER_CREATED, ORDER_DONE } from \"store/actions\";\nimport { Action } from \"store/types\";\nimport { Order, OrderStatus } from \"types/order\";\nimport { getType } from \"typesafe-actions\";\n\ntype State = Readonly<Order[]>;\n\nconst initialState: State = [];\n\nexport function order(state: State = initialState, action: Action): State {\n  switch (action.type) {\n    case getType(ORDER_CREATED):\n      return [...state, action.payload];\n    case getType(ORDER_DONE):\n      return state.map((o) => {\n        if (o.id === action.payload.id) {\n          return {\n            ...o,\n            actualPrice: action.payload.actualPrice,\n            status: OrderStatus.DONE,\n            modifiedTime: action.payload.time,\n          };\n        }\n        return o;\n      });\n    case getType(ORDER_CANCELLED):\n      return state.map((o) => {\n        if (o.id === action.payload.id) {\n          return {\n            ...o,\n            status: OrderStatus.CANCELLED,\n            modifiedTime: action.payload.time,\n          };\n        }\n        return o;\n      });\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { INIT } from \"./actions\";\nimport { getReducersMap } from \"./reducers\";\n\nexport function getReducers() {\n  return combineReducers(getReducersMap());\n}\n\nexport function getInitialState() {\n  return getReducers()(undefined, INIT());\n}\n\nexport default createStore(getReducers(), composeWithDevTools());\n","import { order } from \"./order\";\n\nexport function getReducersMap() {\n  return {\n    order,\n  };\n}\n","import { createMuiTheme } from \"@material-ui/core\";\n\nexport default createMuiTheme();\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { Suspense, lazy } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Route, HashRouter as Router, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport store from \"./store\";\nimport theme from \"./theme\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n\nconst DashboardPage = lazy(() => import(\"./components/Dashboard\"));\n\nconst NotFoundComponent = () => {\n  return <div>Page Not Found</div>;\n};\n\nconst useStyles = makeStyles({\n  app: {\n    margin: \"0 auto\",\n    flex: \"1 0 auto\",\n    padding: \"1rem\",\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n  return (\n    <div className={`App d-flex flex-wrap align-items-center ${classes.app}`}>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <Suspense fallback={<>Loading...</>}>\n            <Router basename={process.env.PUBLIC_URL ?? \"\"}>\n              <Switch>\n                <Route exact path=\"/\" component={DashboardPage} />\n                <Route component={NotFoundComponent} />\n              </Switch>\n            </Router>\n          </Suspense>\n        </Provider>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","/* tslint:disable */\n/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst root = ReactDOM.unstable_createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n/* eslint-enable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access */\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}