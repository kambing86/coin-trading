{"version":3,"sources":["hooks/helpers/useStateSimple.ts","hooks/helpers/useObservable.ts","observables/price.ts","components/CandlestickChart.tsx","store/selectors/order.ts","observables/order.ts","components/CancelOrderButton.tsx","components/OrderList.tsx","hooks/useOrder.ts","components/SimpleButton.tsx","components/SimpleRadioGroup.tsx","components/SimpleSelect.tsx","components/OrderPanel.tsx","components/OrderSummary.tsx","components/Dashboard.tsx"],"names":["reducer","currentState","newState","getInitialState","data","undefined","error","completed","useObservable","initialObservable","initialState","useState","observable","setObservable","useReducer","state","setState","useEffect","subscription","subscribe","unsubscribe","defaultOptions","cacheObservable","Map","getPrice$","name","has","priceTick$","Observable","subscriber","price","Math","random","next","_id","setInterval","changes","clearInterval","set","pipe","map","val","time","Date","share","get","mapToPriceSession","mapFunc","closePrice","groupedPrice$","scan","priceSession","open","max","min","result","close","mapData","key","mapDataFunc","format","CandlestickChart","className","maxSession","groupBy","mergeMap","acc","length","lastIndex","splice","push","removeCount","getPriceSession$","toString","values","d","width","height","chartType","loader","options","legend","rootProps","memo","getOrders","order","filter","cancelEventMap","CancelOrderButton","dispatch","useDispatch","clickHandler","useCallback","id","ORDER_CANCELLED","status","OrderStatus","PENDING","Button","variant","color","onClick","OrderList","gridApi","useRef","gridColumnApi","rowData","setRowData","orders","useSelector","reverse","current","autoSizeAllColumns","classes","join","onGridReady","event","api","columnApi","frameworkComponents","cancelOrderButton","field","cellRenderer","headerName","valueFormatter","params","date","value","useOrder","type","timing","trigger","latestPrice","totalCanSell","reduce","OrderType","BUY","DONE","quantity","SELL","CANCELLED","getTotalCanSell","totalCanSellRef","nameRef","typeRef","timingRef","triggerRef","latestPriceRef","priceRef","quantityRef","onSubmit","submitPrice","Number","alert","nanoid","OrderTiming","NOW","createdTime","actualPrice","ORDER_CREATED","terminate","Subject","tap","delete","takeUntil","OrderTrigger","MORE_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","store","ORDER_DONE","executeOrder$","SimpleButton","text","SimpleRadioGroup","onChange","onChangeHandler","target","RadioGroup","o","FormControlLabel","control","Radio","label","SimpleSelect","FormControl","InputLabel","Select","MenuItem","useStyles","makeStyles","reactSelect","OrderPanel","setType","typeOptions","useMemo","Object","keys","setTiming","timingOptions","startCase","toLowerCase","setTrigger","triggerOptions","onChangeTypeHandler","onChangeTimingHandler","onChangeTriggerHandler","WHEN","TextField","inputRef","defaultValue","OrderSummary","orderInput$","totalOrder$","buyOrders$","shareReplay","sellOrders$","totalBuyQuantity$","totalSellQuantity$","startWith","totalStocksInHand$","combineLatestWith","totalBuyAmount$","totalSellAmount$","totalSettled$","totalSellQuantity","sellQty","settled","qty","sellQtyLeft","totalStockAmount$","summary$","totalStocksInHand","totalStockAmount","totalSellAmount","totalSettled","getSummary$","totalOrder","totalOrderRef","totalSummarizedOrder","forEach","summary","quarter","Dashboard","coinName"],"mappings":"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","file":"static/js/4.8a4695de.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\n/*\nthis is a helper hook that act similar to setState in React\n*/\n\nfunction reducer<T>(currentState: T, newState: Partial<T>) {\n  return {\n    ...currentState,\n    ...newState,\n  };\n}\n\nexport default function useStateSimple<T extends unknown>(\n  initialState: () => T,\n) {\n  return useReducer<React.Reducer<T, Partial<T>>, null>(\n    reducer,\n    null,\n    initialState,\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { Observable } from \"rxjs\";\nimport useStateSimple from \"./useStateSimple\";\n\n/*\na helper hook to observe an Observable\n*/\n\ninterface ObserverState<ReturnData> {\n  readonly data?: ReturnData;\n  readonly error?: Error;\n  readonly completed: boolean;\n}\n\nfunction getInitialState<ReturnData>(): ObserverState<ReturnData> {\n  return {\n    data: undefined,\n    error: undefined,\n    completed: false,\n  };\n}\n\nexport default function useObservable<ReturnData>(\n  initialObservable?: () => Observable<ReturnData>,\n): [\n  ObserverState<ReturnData>,\n  React.Dispatch<React.SetStateAction<Observable<ReturnData>>>,\n] {\n  const [observable, setObservable] = useState<\n    Observable<ReturnData> | undefined\n  >(initialObservable);\n  const [state, setState] = useStateSimple<ObserverState<ReturnData>>(\n    getInitialState,\n  );\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n    const subscription = observable.subscribe(\n      (data) => {\n        setState({ data });\n      },\n      (error: Error) => {\n        setState({ error });\n      },\n      () => {\n        setState({ completed: true });\n      },\n    );\n    return () => {\n      setState(getInitialState());\n      subscription.unsubscribe();\n    };\n  }, [observable, setState]);\n\n  return [\n    state,\n    setObservable as React.Dispatch<\n      React.SetStateAction<Observable<ReturnData>>\n    >,\n  ];\n}\n","import { format } from \"date-fns\";\nimport { GroupedObservable, Observable } from \"rxjs\";\nimport { groupBy, map, mergeMap, scan, share } from \"rxjs/operators\";\n\ninterface Options {\n  intervalInMs: number;\n  maxPriceChange: number;\n}\n\nconst defaultOptions: Options = {\n  intervalInMs: 1000,\n  maxPriceChange: 0.01,\n};\n\ninterface Price {\n  name: string;\n  price: number;\n  time: Date;\n}\n\nexport interface PriceSession<T> {\n  key: string;\n  name?: string;\n  open?: number;\n  close?: number;\n  min?: number;\n  max?: number;\n  time?: Date;\n  mapData?: T;\n}\n\nexport type MapPriceSession<T = undefined> = Omit<\n  Required<PriceSession<T>>,\n  \"mapData\"\n>;\n\nconst cacheObservable = new Map<string, Observable<Price>>();\n\nexport const getPrice$ = (name: string) => {\n  if (!cacheObservable.has(name)) {\n    const priceTick$ = new Observable<number>((subscriber) => {\n      let price = Math.random() * 10000;\n      subscriber.next(price);\n      const _id = setInterval(() => {\n        const changes = price * Math.random() * defaultOptions.maxPriceChange;\n        price += changes * (Math.random() > 0.5 ? 1 : -1);\n        subscriber.next(price);\n      }, defaultOptions.intervalInMs);\n      return () => {\n        clearInterval(_id);\n      };\n    });\n    cacheObservable.set(\n      name,\n      priceTick$.pipe(\n        map((val) => ({ name, price: val, time: new Date() } as Price)),\n        share(),\n      ),\n    );\n  }\n  return cacheObservable.get(name) as Observable<Price>;\n};\n\nexport const getPriceSession$ = <T>(\n  name: string,\n  maxSession: number,\n  mapFunc: (val: MapPriceSession<T>) => T,\n) => {\n  return getPrice$(name).pipe(\n    groupBy((val) => format(val.time, \"yyyyMMddHHmm\")),\n    mergeMap(mapToPriceSession(mapFunc)),\n    scan((acc, val) => {\n      const result = [...acc];\n      if (result.length !== 0) {\n        const lastIndex = result.length - 1;\n        const lastItem = result[lastIndex];\n        if (lastItem.key === val.key) {\n          result.splice(lastIndex, 1, val);\n        } else {\n          result.push(val);\n        }\n      } else {\n        result.push(val);\n      }\n      if (result.length > maxSession) {\n        const removeCount = result.length - maxSession;\n        result.splice(0, removeCount);\n      }\n      return result;\n    }, [] as Required<PriceSession<T>>[]),\n  );\n};\n\nconst mapToPriceSession = <T>(mapFunc: (val: MapPriceSession<T>) => T) => {\n  let closePrice: number | undefined;\n  return (groupedPrice$: GroupedObservable<string, Price>) => {\n    return groupedPrice$.pipe(\n      scan(\n        (priceSession, val) => {\n          const { price, time } = val;\n          const open = priceSession.open ?? closePrice ?? price;\n          let max = priceSession.max;\n          if (max === undefined || max < price) {\n            max = price;\n          }\n          let min = priceSession.min;\n          if (min === undefined || min > price) {\n            min = price;\n          }\n          const result = {\n            ...priceSession,\n            name: val.name,\n            open,\n            close: price,\n            max,\n            min,\n            time,\n          } as Required<PriceSession<T>>;\n          result.mapData = mapFunc(result);\n          closePrice = price;\n          return result;\n        },\n        { key: groupedPrice$.key } as PriceSession<T>,\n      ),\n    ) as Observable<Required<PriceSession<T>>>;\n  };\n};\n","import { format } from \"date-fns\";\nimport useObservable from \"hooks/helpers/useObservable\";\nimport { MapPriceSession, getPriceSession$ } from \"observables/price\";\nimport { memo } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\ntype GoogleDataType = [string, number, number, number, number];\n\nfunction mapDataFunc(data: MapPriceSession<GoogleDataType>): GoogleDataType {\n  const { time, open, close, min, max } = data;\n  return [format(time, \"HH:mm\"), min, open, close, max];\n}\n\ninterface Props {\n  name: string;\n  className?: string;\n}\n\nconst CandlestickChart = ({ name, className }: Props) => {\n  const [price] = useObservable(() => getPriceSession$(name, 10, mapDataFunc));\n  const { data, error } = price;\n  if (error) {\n    return <>{error.toString()}</>;\n  }\n  const values = data?.map((d) => d.mapData);\n  return (\n    <div className={className}>\n      {values && (\n        <Chart\n          width=\"100%\"\n          height=\"100%\"\n          chartType=\"CandlestickChart\"\n          loader={<div>Loading Chart</div>}\n          data={[[\"minute\", \"a\", \"b\", \"c\", \"d\"], ...values]}\n          options={{\n            legend: \"none\",\n          }}\n          rootProps={{ \"data-testid\": \"1\" }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(CandlestickChart);\n","import { GlobalState } from \"store/types\";\nimport { OrderStatus, OrderType } from \"types/order\";\n\nexport const getTotalCanSell = (name: string) => (state: GlobalState) =>\n  state.order\n    .filter((order) => order.name === name)\n    .reduce((acc, order) => {\n      if (order.type === OrderType.BUY && order.status === OrderStatus.DONE) {\n        return acc + order.quantity;\n      } else if (\n        order.type === OrderType.SELL &&\n        order.status !== OrderStatus.CANCELLED\n      ) {\n        return acc - order.quantity;\n      }\n      return acc;\n    }, 0);\n\nexport const getOrders = (name: string) => (state: GlobalState) =>\n  state.order.filter((order) => order.name === name);\n","import { Subject } from \"rxjs\";\nimport {\n  combineLatestWith,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  shareReplay,\n  startWith,\n  takeUntil,\n  tap,\n} from \"rxjs/operators\";\nimport store from \"store\";\nimport { ORDER_DONE } from \"store/actions\";\nimport { Order, OrderTrigger, OrderType } from \"types/order\";\nimport { getPrice$ } from \"./price\";\n\nexport const cancelEventMap = new Map<string, Subject<void>>();\n\nexport const executeOrder$ = (order: Order) => {\n  const terminate = new Subject<void>();\n  terminate.pipe(\n    tap(() => {\n      cancelEventMap.delete(order.id);\n    }),\n  );\n  cancelEventMap.set(order.id, terminate);\n  getPrice$(order.name)\n    .pipe(takeUntil(terminate))\n    .subscribe((current) => {\n      if (\n        current.price >= order.price &&\n        order.trigger === OrderTrigger.MORE_THAN_OR_EQUAL\n      ) {\n        store.dispatch(\n          ORDER_DONE({\n            id: order.id,\n            actualPrice: current.price,\n            time: new Date(),\n          }),\n        );\n        terminate.next();\n      } else if (\n        current.price <= order.price &&\n        order.trigger === OrderTrigger.LESS_THAN_OR_EQUAL\n      ) {\n        store.dispatch(\n          ORDER_DONE({\n            id: order.id,\n            actualPrice: current.price,\n            time: new Date(),\n          }),\n        );\n        terminate.next();\n      }\n    });\n};\n\nexport const getSummary$ = () => {\n  const orderInput$ = new Subject<Order>();\n  const totalOrder$ = orderInput$.pipe(scan((acc) => acc + 1, 0));\n  const buyOrders$ = orderInput$.pipe(\n    filter((o) => o.type === OrderType.BUY),\n    shareReplay(),\n  );\n  const sellOrders$ = orderInput$.pipe(\n    filter((o) => o.type === OrderType.SELL),\n  );\n  const totalBuyQuantity$ = buyOrders$.pipe(\n    scan((acc, val) => {\n      return acc + val.quantity;\n    }, 0),\n  );\n  const totalSellQuantity$ = sellOrders$.pipe(\n    scan((acc, val) => {\n      return acc + val.quantity;\n    }, 0),\n    startWith(0),\n  );\n  const totalStocksInHand$ = totalBuyQuantity$.pipe(\n    combineLatestWith(totalSellQuantity$),\n    map(\n      ([totalBuyQuantity, totalSellQuantity]) =>\n        totalBuyQuantity - totalSellQuantity,\n    ),\n    startWith(0),\n  );\n\n  const totalBuyAmount$ = buyOrders$.pipe(\n    scan((acc, val) => {\n      return acc + val.quantity * (val.actualPrice ?? 0);\n    }, 0),\n  );\n  const totalSellAmount$ = sellOrders$.pipe(\n    scan((acc, val) => {\n      return acc + val.quantity * (val.actualPrice ?? 0);\n    }, 0),\n    startWith(0),\n  );\n  const totalSettled$ = totalSellQuantity$.pipe(\n    mergeMap((totalSellQuantity) =>\n      buyOrders$.pipe(\n        scan(\n          (acc, val) => {\n            const { sellQty, settled } = acc;\n            if (sellQty === 0) return acc;\n            let qty = val.quantity;\n            if (sellQty < val.quantity) {\n              qty = sellQty;\n            }\n            let sellQtyLeft = sellQty - val.quantity;\n            if (sellQtyLeft < 0) {\n              sellQtyLeft = 0;\n            }\n            return {\n              sellQty: sellQtyLeft,\n              settled: settled + qty * (val.actualPrice ?? 0),\n            };\n          },\n          { sellQty: totalSellQuantity, settled: 0 },\n        ),\n      ),\n    ),\n    map(({ settled }) => settled),\n    startWith(0),\n  );\n  const totalStockAmount$ = totalBuyAmount$.pipe(\n    combineLatestWith(totalSettled$),\n    map(([totalBuyAmount, totalSettled]) => totalBuyAmount - totalSettled),\n    startWith(0),\n  );\n\n  return {\n    orderInput$,\n    totalOrder$,\n    summary$: totalStocksInHand$.pipe(\n      combineLatestWith(totalStockAmount$, totalSellAmount$, totalSettled$),\n      map(\n        ([\n          totalStocksInHand,\n          totalStockAmount,\n          totalSellAmount,\n          totalSettled,\n        ]) => ({\n          totalStocksInHand,\n          totalStockAmount,\n          totalSellAmount,\n          totalSettled,\n        }),\n      ),\n    ),\n  };\n};\n","import Button from \"@material-ui/core/Button\";\nimport { cancelEventMap } from \"observables/order\";\nimport { memo, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ORDER_CANCELLED } from \"store/actions\";\nimport { Order, OrderStatus } from \"types/order\";\n\ninterface Props {\n  data: Order;\n}\n\nconst CancelOrderButton = ({ data }: Props) => {\n  const dispatch = useDispatch();\n  const clickHandler = useCallback(() => {\n    cancelEventMap.get(data.id)?.next();\n    dispatch(ORDER_CANCELLED({ id: data.id, time: new Date() }));\n  }, [data, dispatch]);\n  if (data.status !== OrderStatus.PENDING) {\n    // passing null will cause error in ag-grid\n    // https://github.com/ag-grid/ag-grid/issues/3222#issuecomment-524034219\n    return <div></div>;\n  }\n  return (\n    <Button variant=\"contained\" color=\"secondary\" onClick={clickHandler}>\n      Cancel\n    </Button>\n  );\n};\n\nexport default memo(CancelOrderButton);\n","import { ColumnApi, GridApi, GridReadyEvent } from \"ag-grid-community\";\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\nimport { format } from \"date-fns\";\nimport { memo, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getOrders } from \"store/selectors/order\";\nimport { Order } from \"types/order\";\nimport CancelOrderButton from \"./CancelOrderButton\";\n\ninterface Props {\n  className?: string;\n  name: string;\n}\n\nconst OrderList = ({ className, name }: Props) => {\n  const gridApi = useRef<GridApi | null>(null);\n  const gridColumnApi = useRef<ColumnApi | null>(null);\n\n  const [rowData, setRowData] = useState<Order[]>([]);\n\n  const orders = useSelector(getOrders(name));\n\n  useEffect(() => {\n    setRowData(orders.reverse());\n    gridColumnApi.current?.autoSizeAllColumns();\n  }, [orders]);\n\n  const onGridReady = (event: GridReadyEvent) => {\n    gridApi.current = event.api;\n    gridColumnApi.current = event.columnApi;\n  };\n  const classes = [\"ag-theme-alpine\"];\n  if (className) {\n    classes.push(className);\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <AgGridReact\n        onGridReady={onGridReady}\n        rowData={rowData}\n        frameworkComponents={{ cancelOrderButton: CancelOrderButton }}\n      >\n        <AgGridColumn\n          field=\"cancel\"\n          cellRenderer=\"cancelOrderButton\"\n          headerName=\"Action\"\n        ></AgGridColumn>\n        <AgGridColumn field=\"status\"></AgGridColumn>\n        <AgGridColumn field=\"type\"></AgGridColumn>\n        <AgGridColumn field=\"price\"></AgGridColumn>\n        <AgGridColumn field=\"actualPrice\"></AgGridColumn>\n        <AgGridColumn field=\"quantity\"></AgGridColumn>\n        <AgGridColumn\n          field=\"createdTime\"\n          valueFormatter={(params) => {\n            const date = params.value as Order[\"createdTime\"];\n            return format(date, \"yyyy-MM-dd HH:mm:ss\");\n          }}\n        ></AgGridColumn>\n        <AgGridColumn\n          field=\"modifiedTime\"\n          valueFormatter={(params) => {\n            const date = params.value as Order[\"modifiedTime\"];\n            if (date) {\n              return format(date, \"yyyy-MM-dd HH:mm:ss\");\n            }\n            return \"\";\n          }}\n        ></AgGridColumn>\n      </AgGridReact>\n    </div>\n  );\n};\n\nexport default memo(OrderList);\n","import { nanoid } from \"nanoid\";\nimport { executeOrder$ } from \"observables/order\";\nimport { useCallback, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ORDER_CREATED } from \"store/actions\";\nimport { getTotalCanSell } from \"store/selectors/order\";\nimport {\n  Order,\n  OrderStatus,\n  OrderTiming,\n  OrderTrigger,\n  OrderType,\n} from \"types/order\";\n\ninterface Options {\n  name: string;\n  type: OrderType;\n  timing: OrderTiming;\n  trigger: OrderTrigger;\n  latestPrice: number;\n}\n\nexport const useOrder = ({\n  name,\n  type,\n  timing,\n  trigger,\n  latestPrice,\n}: Options) => {\n  const totalCanSell = useSelector(getTotalCanSell(name));\n  const totalCanSellRef = useRef(totalCanSell);\n  totalCanSellRef.current = totalCanSell;\n  const nameRef = useRef(name);\n  nameRef.current = name;\n  const typeRef = useRef(type);\n  typeRef.current = type;\n  const timingRef = useRef(timing);\n  timingRef.current = timing;\n  const triggerRef = useRef(trigger);\n  triggerRef.current = trigger;\n  const latestPriceRef = useRef(latestPrice);\n  latestPriceRef.current = latestPrice;\n  const dispatch = useDispatch();\n\n  const priceRef = useRef<HTMLInputElement>(null);\n  const quantityRef = useRef<HTMLInputElement>(null);\n  const onSubmit = useCallback(() => {\n    const submitPrice = Number(priceRef.current?.value ?? \"0\");\n    const quantity = Number(quantityRef.current?.value ?? \"0\");\n    if (typeRef.current === OrderType.SELL) {\n      if (totalCanSellRef.current < quantity) {\n        alert(\"Not enough stock to sell\");\n        return;\n      }\n    }\n    const order: Order = {\n      id: nanoid(),\n      name: nameRef.current,\n      type: typeRef.current,\n      trigger:\n        timingRef.current === OrderTiming.NOW ? undefined : triggerRef.current,\n      price:\n        timingRef.current === OrderTiming.NOW\n          ? latestPriceRef.current\n          : submitPrice,\n      quantity: quantity,\n      status:\n        timingRef.current === OrderTiming.NOW\n          ? OrderStatus.DONE\n          : OrderStatus.PENDING,\n      createdTime: new Date(),\n    };\n    if (timingRef.current === OrderTiming.NOW) {\n      order.actualPrice = order.price;\n    }\n    dispatch(ORDER_CREATED(order));\n    executeOrder$(order);\n  }, [dispatch]);\n\n  return { priceRef, quantityRef, onSubmit };\n};\n","import Button from \"@material-ui/core/Button\";\nimport { memo } from \"react\";\n\ninterface Props {\n  text: string;\n  onClick?: () => void;\n}\n\nconst SimpleButton = ({ text, onClick }: Props) => {\n  return (\n    <Button variant=\"contained\" color=\"primary\" onClick={onClick}>\n      {text}\n    </Button>\n  );\n};\n\nexport default memo(SimpleButton);\n","import FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport { ChangeEvent, memo, useCallback } from \"react\";\n\ninterface Props {\n  options: OptionType[];\n  value: string;\n  onChange?: (value: string) => void;\n}\n\nconst SimpleRadioGroup = ({ options, value, onChange }: Props) => {\n  const onChangeHandler = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      onChange?.(event.target.value);\n    },\n    [onChange],\n  );\n  return (\n    <RadioGroup value={value} onChange={onChangeHandler}>\n      {options.map((o) => (\n        <FormControlLabel\n          key={o.value}\n          value={o.value}\n          control={<Radio />}\n          label={o.label}\n        />\n      ))}\n    </RadioGroup>\n  );\n};\n\nexport default memo(SimpleRadioGroup);\n","import FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { ChangeEvent, memo, useCallback } from \"react\";\n\ninterface Props {\n  label?: string;\n  options: OptionType[];\n  onChange?: (value: string) => void;\n  className?: string;\n  value?: string;\n}\n\nconst SimpleSelect = ({\n  label,\n  options,\n  onChange,\n  className,\n  value,\n}: Props) => {\n  const onChangeHandler = useCallback(\n    (event: ChangeEvent<{ value: unknown }>) => {\n      onChange?.(event.target.value as string);\n    },\n    [onChange],\n  );\n  return (\n    <FormControl className={className}>\n      {label && <InputLabel>{label}</InputLabel>}\n      <Select value={value} onChange={onChangeHandler}>\n        {options.map((o) => (\n          <MenuItem key={o.value} value={o.value}>\n            {o.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default memo(SimpleSelect);\n","import TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport useObservable from \"hooks/helpers/useObservable\";\nimport { useOrder } from \"hooks/useOrder\";\nimport { startCase } from \"lodash\";\nimport { getPrice$ } from \"observables/price\";\nimport { memo, useCallback, useMemo, useState } from \"react\";\nimport { OrderTiming, OrderTrigger, OrderType } from \"types/order\";\nimport SimpleButton from \"./SimpleButton\";\nimport SimpleRadioGroup from \"./SimpleRadioGroup\";\nimport SimpleSelect from \"./SimpleSelect\";\n\nconst useStyles = makeStyles(() => ({\n  reactSelect: {\n    width: \"100%\",\n  },\n}));\n\ninterface Props {\n  name: string;\n  className?: string;\n}\n\nexport const OrderPanel = ({ name, className }: Props) => {\n  const classes = useStyles();\n  const [price] = useObservable(() => getPrice$(name));\n  const { data } = price;\n  const [type, setType] = useState<OrderType>(OrderType.BUY);\n  const typeOptions: OptionType[] = useMemo(\n    () =>\n      Object.keys(OrderType).map((val) => ({\n        label: val,\n        value: val,\n      })),\n    [],\n  );\n  const [timing, setTiming] = useState<OrderTiming>(OrderTiming.NOW);\n  const timingOptions: OptionType[] = useMemo(\n    () =>\n      Object.keys(OrderTiming).map((val) => ({\n        label: startCase(val.toLowerCase()),\n        value: val,\n      })),\n    [],\n  );\n  const [trigger, setTrigger] = useState<OrderTrigger>(\n    OrderTrigger.LESS_THAN_OR_EQUAL,\n  );\n  const triggerOptions: OptionType[] = useMemo(\n    () =>\n      Object.keys(OrderTrigger).map((val) => ({\n        label: startCase(val.toLowerCase()),\n        value: val,\n      })),\n    [],\n  );\n\n  const onChangeTypeHandler = useCallback((val: string) => {\n    setType(val as OrderType);\n    if (val === OrderType.BUY) {\n      setTrigger(OrderTrigger.LESS_THAN_OR_EQUAL);\n    } else {\n      setTrigger(OrderTrigger.MORE_THAN_OR_EQUAL);\n    }\n  }, []);\n  const onChangeTimingHandler = useCallback((val: string) => {\n    setTiming(val as OrderTiming);\n  }, []);\n  const onChangeTriggerHandler = useCallback((val: string) => {\n    setTrigger(val as OrderTrigger);\n  }, []);\n\n  const latestPrice = data?.price ?? 0;\n  const { priceRef, quantityRef, onSubmit } = useOrder({\n    name,\n    type,\n    timing,\n    trigger,\n    latestPrice,\n  });\n\n  return (\n    <div className={className}>\n      {data && <div>{`${data.name}: ${data.price}`}</div>}\n      <SimpleSelect\n        options={typeOptions}\n        onChange={onChangeTypeHandler}\n        className={classes.reactSelect}\n        value={type}\n      />\n      <SimpleRadioGroup\n        options={timingOptions}\n        value={timing}\n        onChange={onChangeTimingHandler}\n      />\n      {timing === OrderTiming.WHEN && (\n        <div>\n          <div>when price is</div>\n          <SimpleSelect\n            options={triggerOptions}\n            onChange={onChangeTriggerHandler}\n            className={classes.reactSelect}\n            value={trigger}\n          />\n          <TextField inputRef={priceRef} defaultValue={latestPrice} />\n        </div>\n      )}\n      <div>\n        <div>for total of quantity</div>\n        <TextField inputRef={quantityRef} defaultValue={1000} />\n      </div>\n      <SimpleButton text=\"Submit\" onClick={onSubmit} />\n    </div>\n  );\n};\n\nexport default memo(OrderPanel);\n","import useObservable from \"hooks/helpers/useObservable\";\nimport { getSummary$ } from \"observables/order\";\nimport { memo, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getOrders } from \"store/selectors/order\";\nimport { OrderStatus } from \"types/order\";\n\ninterface Props {\n  className?: string;\n  name: string;\n}\n\n// const OrderSummary = ({ className, name }: Props) => {\n//   const orders = useSelector(getOrders(name));\n//   const confirmedOrders = orders.filter((o) => o.status === OrderStatus.DONE);\n//   const buyOrders = confirmedOrders.filter((o) => o.type === OrderType.BUY);\n//   const sellOrders = confirmedOrders.filter((o) => o.type === OrderType.SELL);\n//   const totalBuyQuantity = buyOrders.reduce((acc, val) => {\n//     return acc + val.quantity;\n//   }, 0);\n//   const totalSellQuantity = sellOrders.reduce((acc, val) => {\n//     return acc + val.quantity;\n//   }, 0);\n//   const totalStocksInHand = totalBuyQuantity - totalSellQuantity;\n//   const getSettled = buyOrders.reduce(\n//     (acc, val) => {\n//       const { sellQty, settled } = acc;\n//       if (sellQty === 0) return acc;\n//       let qty = val.quantity;\n//       if (sellQty < val.quantity) {\n//         qty = sellQty;\n//       }\n//       let sellQtyLeft = sellQty - val.quantity;\n//       if (sellQtyLeft < 0) {\n//         sellQtyLeft = 0;\n//       }\n//       return {\n//         sellQty: sellQtyLeft,\n//         settled: settled + qty * (val.actualPrice ?? 0),\n//       };\n//     },\n//     { sellQty: totalSellQuantity, settled: 0 },\n//   );\n//   const { settled: totalSettled } = getSettled;\n//   const totalBuyAmount = buyOrders.reduce((acc, val) => {\n//     return acc + val.quantity * (val.actualPrice ?? 0);\n//   }, 0);\n//   const totalSellAmount = sellOrders.reduce((acc, val) => {\n//     return acc + val.quantity * (val.actualPrice ?? 0);\n//   }, 0);\n//   const totalStockAmount = totalBuyAmount - totalSettled;\n\n//   return (\n//     <div className={className}>\n//       <div>Stocks in hand: {totalStocksInHand}</div>\n//       <div>Total stock amount: {totalStockAmount}</div>\n//       <div>\n//         Average price:{\" \"}\n//         {totalStocksInHand === 0 ? 0 : totalStockAmount / totalStocksInHand}\n//       </div>\n//       <div>Profit/Loss: {totalSellAmount - totalSettled}</div>\n//     </div>\n//   );\n// };\n\nconst OrderSummary = ({ className, name }: Props) => {\n  const orders = useSelector(getOrders(name));\n  const data = useRef(getSummary$());\n  const [totalOrder] = useObservable(() => data.current.totalOrder$);\n  const totalOrderRef = useRef(totalOrder.data);\n  totalOrderRef.current = totalOrder.data;\n  useEffect(() => {\n    const totalSummarizedOrder = totalOrderRef.current ?? 0;\n    const remainingOrders = orders\n      .filter((o) => o.status === OrderStatus.DONE)\n      .splice(totalSummarizedOrder);\n    remainingOrders.forEach((o) => data.current.orderInput$.next(o));\n  }, [orders]);\n  const [summary] = useObservable(() => data.current.summary$);\n  const totalStocksInHand = summary.data?.totalStocksInHand ?? 0;\n  const totalStockAmount = summary.data?.totalStockAmount ?? 0;\n  const totalSellAmount = summary.data?.totalSellAmount ?? 0;\n  const totalSettled = summary.data?.totalSettled ?? 0;\n  return (\n    <div className={className}>\n      <div>Stocks in hand: {totalStocksInHand}</div>\n      <div>Total stock amount: {totalStockAmount}</div>\n      <div>\n        Average price:{\" \"}\n        {totalStocksInHand === 0 ? 0 : totalStockAmount / totalStocksInHand}\n      </div>\n      <div>Profit/Loss: {totalSellAmount - totalSettled}</div>\n    </div>\n  );\n};\n\nexport default memo(OrderSummary);\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { memo } from \"react\";\nimport CandlestickChart from \"./CandlestickChart\";\nimport OrderList from \"./OrderList\";\nimport { OrderPanel } from \"./OrderPanel\";\nimport OrderSummary from \"./OrderSummary\";\n\nconst useStyles = makeStyles(() => ({\n  quarter: {\n    width: \"50%\",\n    height: \"50%\",\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const coinName = \"Coin A\";\n  return (\n    <>\n      <OrderPanel className={classes.quarter} name={coinName} />\n      <CandlestickChart className={classes.quarter} name={coinName} />\n      <OrderList className={classes.quarter} name={coinName} />\n      <OrderSummary className={classes.quarter} name={coinName} />\n    </>\n  );\n};\n\nexport default memo(Dashboard);\n"],"sourceRoot":""}